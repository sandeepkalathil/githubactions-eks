name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: freshfarm-repo  # Ensure this matches your actual ECR repo name
  EKS_CLUSTER_NAME: Freshfarm-cluster  # Ensure this matches your EKS cluster name
  K8S_NAMESPACE: freshmart
  APP_NAME: freshmart

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - run: npm run test

  static-analysis:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Run ESLint
        run: npm run lint

  build-and-push:
    needs: static-analysis
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR Image Tag
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
          echo "IMAGE_URI=$IMAGE_URI:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_LATEST=$IMAGE_URI:latest" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_URI }}
            ${{ env.IMAGE_LATEST }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      IMAGE_URI: 794038256791.dkr.ecr.eu-north-1.amazonaws.com/freshfarm-repo:latest  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
          kubectl config use-context arn:aws:eks:eu-north-1:794038256791:cluster/$EKS_CLUSTER_NAME

      - name: Ensure Namespace Exists
        run: kubectl create namespace $K8S_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to EKS
        run: |
            if kubectl get deployment "$APP_NAME" -n "$K8S_NAMESPACE" > /dev/null 2>&1; then
              echo "‚úÖ Deployment $APP_NAME exists. Updating image..."
              
              CONTAINER_NAME=$(kubectl get deployment "$APP_NAME" -n "$K8S_NAMESPACE" -o jsonpath="{.spec.template.spec.containers[0].name}" || echo "")
              
              if [ -n "$CONTAINER_NAME" ]; then
              echo "üîÑ Updating container $CONTAINER_NAME with image $IMAGE_URI..."
              kubectl set image deployment/"$APP_NAME" -n "$K8S_NAMESPACE" "$CONTAINER_NAME=$IMAGE_URI" || { echo "‚ùå Failed to set image for deployment."; exit 1; }
              kubectl rollout status deployment/"$APP_NAME" -n "$K8S_NAMESPACE" || { echo "‚ùå Rollout failed."; exit 1; }
              echo "‚úÖ Rollout successful."
              else
              echo "‚ùå Error: Could not determine container name."
              exit 1
              fi
            else
              echo "üöÄ Deployment $APP_NAME does not exist. Applying manifest..."
              kubectl apply -f k8s/deployment.yaml || { echo "‚ùå Failed to apply deployment."; exit 1; }
              echo "‚úÖ Deployment applied successfully."
            fi
